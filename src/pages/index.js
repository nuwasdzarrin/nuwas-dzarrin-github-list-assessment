import Head from 'next/head'
import styles from '@/styles/Repository.module.css'
import { connect } from 'react-redux'
import { setSearch, setRepositories, setLoading } from '@/redux/action/repo/action'
import {actionType} from "@/redux/action/repo/type";
import { toast } from 'react-nextjs-toast'
import Api from '@/utils/api'
import ListRepository from "@/components/repository/ListRepository";
const Index = (props) => {
    const onSearch = (event) => {
        props.setSearch(event.target.value)
    }

    const onInputSearchEnter = (e) => {
      if (e.key === 'Enter') fetchRepository().then(r => {})
    }
    const fetchRepository = async () => {
        try {
            props.setLoading(true)
            let res = await Api.repos.list(props.username,{})
            if (res.status === 200) {
                props.setRepositories(res.data)
            }
        } catch (e) {
            props.setRepositories([])
            showErrorNotify(e.response.data.message)
            throw e
        } finally {
            props.setLoading(false)
        }
    }

    const showErrorNotify = (message) => {
        toast.notify(`Username ${message}`, {
            duration: 10,
            type: "error",
            title: "Fail"
        })
    }
    return (
        <>
            <Head>
                <title>Github List</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <h2 className={styles.title}>List Repositories</h2>
                <div>
                    <input type="text" placeholder="Type github username..." className={styles.formSearchInput}
                           onChange={onSearch} onKeyDown={onInputSearchEnter}/>
                    <button className={styles.buttonSearch} onClick={fetchRepository}>Search</button>
                </div>
                <div className={styles.space}></div>
                <ListRepository />
            </main>
        </>
    )
}

const mapStateToProps = (state) => ({
    username: state.repo.search
})

const mapDispatchToProps = (dispatch) => ({
    setSearch: (search) => dispatch(setSearch(actionType.setSearch, { search: search })),
    setRepositories: (data) => dispatch(setRepositories(actionType.setRepo, { repositories: data })),
    setLoading: (data) => dispatch(setLoading(actionType.setLoading, { loading: data }))
})
export default connect(mapStateToProps, mapDispatchToProps)(Index)